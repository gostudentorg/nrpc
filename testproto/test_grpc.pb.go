// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	// Unary implements a unary RPC method for testing.
	Unary(ctx context.Context, in *UnaryReq, opts ...grpc.CallOption) (*UnaryResp, error)
	// ServerStream implements a server streaming RPC method for testing.
	ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (Test_ServerStreamClient, error)
	// ClientStream implements a client streaming RPC method for testing.
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error)
	// BiDiStream implements a bidirectional streaming RPC method for testing.
	BiDiStream(ctx context.Context, opts ...grpc.CallOption) (Test_BiDiStreamClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) Unary(ctx context.Context, in *UnaryReq, opts ...grpc.CallOption) (*UnaryResp, error) {
	out := new(UnaryResp)
	err := c.cc.Invoke(ctx, "/testproto.Test/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (Test_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], "/testproto.Test/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_ServerStreamClient interface {
	Recv() (*ServerStreamResp, error)
	grpc.ClientStream
}

type testServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServerStreamClient) Recv() (*ServerStreamResp, error) {
	m := new(ServerStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], "/testproto.Test/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testClientStreamClient{stream}
	return x, nil
}

type Test_ClientStreamClient interface {
	Send(*ClientStreamReq) error
	CloseAndRecv() (*ClientStreamResp, error)
	grpc.ClientStream
}

type testClientStreamClient struct {
	grpc.ClientStream
}

func (x *testClientStreamClient) Send(m *ClientStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testClientStreamClient) CloseAndRecv() (*ClientStreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) BiDiStream(ctx context.Context, opts ...grpc.CallOption) (Test_BiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], "/testproto.Test/BiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBiDiStreamClient{stream}
	return x, nil
}

type Test_BiDiStreamClient interface {
	Send(*BiDiStreamReq) error
	Recv() (*BiDiStreamResp, error)
	grpc.ClientStream
}

type testBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *testBiDiStreamClient) Send(m *BiDiStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testBiDiStreamClient) Recv() (*BiDiStreamResp, error) {
	m := new(BiDiStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	// Unary implements a unary RPC method for testing.
	Unary(context.Context, *UnaryReq) (*UnaryResp, error)
	// ServerStream implements a server streaming RPC method for testing.
	ServerStream(*ServerStreamReq, Test_ServerStreamServer) error
	// ClientStream implements a client streaming RPC method for testing.
	ClientStream(Test_ClientStreamServer) error
	// BiDiStream implements a bidirectional streaming RPC method for testing.
	BiDiStream(Test_BiDiStreamServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) Unary(context.Context, *UnaryReq) (*UnaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedTestServer) ServerStream(*ServerStreamReq, Test_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTestServer) ClientStream(Test_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTestServer) BiDiStream(Test_BiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testproto.Test/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Unary(ctx, req.(*UnaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStream(m, &testServerStreamServer{stream})
}

type Test_ServerStreamServer interface {
	Send(*ServerStreamResp) error
	grpc.ServerStream
}

type testServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServerStreamServer) Send(m *ServerStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).ClientStream(&testClientStreamServer{stream})
}

type Test_ClientStreamServer interface {
	SendAndClose(*ClientStreamResp) error
	Recv() (*ClientStreamReq, error)
	grpc.ServerStream
}

type testClientStreamServer struct {
	grpc.ServerStream
}

func (x *testClientStreamServer) SendAndClose(m *ClientStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testClientStreamServer) Recv() (*ClientStreamReq, error) {
	m := new(ClientStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_BiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).BiDiStream(&testBiDiStreamServer{stream})
}

type Test_BiDiStreamServer interface {
	Send(*BiDiStreamResp) error
	Recv() (*BiDiStreamReq, error)
	grpc.ServerStream
}

type testBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *testBiDiStreamServer) Send(m *BiDiStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testBiDiStreamServer) Recv() (*BiDiStreamReq, error) {
	m := new(BiDiStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testproto.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Test_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Test_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Test_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDiStream",
			Handler:       _Test_BiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testproto/test.proto",
}
